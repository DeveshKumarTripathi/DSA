/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int preIdx = 0; 

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return buildTree(preorder, inorder, 0, inorder.length - 1);
    }

    private TreeNode buildTree(int[] preorder, int[] inorder, int left, int right) {
        if (left > right) return null;

        TreeNode root = new TreeNode(preorder[preIdx++]);

        int inIdx = search(inorder, root.val, left, right);
        
        root.left = buildTree(preorder, inorder, left, inIdx - 1);
        root.right = buildTree(preorder, inorder, inIdx + 1, right);

        return root;
    }

    private int search(int[] inorder, int rootValue, int left, int right) {
        for (int i = left; i <= right; i++) {
            if (inorder[i] == rootValue) return i;
        }
        return -1; // Shouldn't happen if the input is valid
    }
}
